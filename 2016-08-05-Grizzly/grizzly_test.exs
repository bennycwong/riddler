Code.load_file("grizzly.ex")

ExUnit.start
ExUnit.configure exclude: :pending, trace: true

defmodule GrizzlyProblemTest do
  use ExUnit.Case, async: true

  test "Fish is in less than 1001 grams" do
    assert GrizzlyProblem.generate_fish_in_grams.weight <= 1000
  end

  test "Fish is in greater than 0 grams" do
    assert GrizzlyProblem.generate_fish_in_grams.weight > 0
  end

  test "Grizzly will eat first fish if it's larger than threshold" do
    first_fish = %{weight: 300}
    threshold_in_grams = 200
    assert GrizzlyProblem.eat_fish?(first_fish, threshold_in_grams) == %{consumed: true, current_fish: first_fish}
  end

  test "Grizzly will not eat first fish if it's larger than threshold" do
    first_fish = %{weight: 100}
    threshold_in_grams = 200
    assert GrizzlyProblem.eat_fish?(first_fish, threshold_in_grams) == %{consumed: false, current_fish: first_fish}
  end

  test "Grizzly will eat if current fish is greater than larger than largest fish consumed" do
    largest_fish_consumed = %{weight: 100}
    current_fish = %{weight: 200}
    assert GrizzlyProblem.eat_fish?(current_fish, largest_fish_consumed) == %{consumed: true, current_fish: current_fish}
  end

  test "Grizzly will eat if current fish is the same size as largest fish consumed" do
    largest_fish_consumed = %{weight: 300}
    current_fish = %{weight: 300}
    assert GrizzlyProblem.eat_fish?(current_fish, largest_fish_consumed) == %{consumed: true, current_fish: current_fish}
  end

  test "Grizzly will not eat if current fish is greater than larger than largest fish consumed" do
    largest_fish_consumed = %{weight: 200}
    current_fish = %{weight: 100}
    assert GrizzlyProblem.eat_fish?(current_fish, largest_fish_consumed) == %{consumed: false, current_fish: current_fish}
  end

  test "Number of fish generated by gen_multiple_fish length is correct" do
    assert GrizzlyProblem.gen_multiple_fish(3) |> Enum.count == 3
  end

  test "add up list of fish consumed accurately" do
    assert GrizzlyProblem.sum_weight_of_fish([100, 0, 0, 88, 0, 323, 0, 132]) == 643
  end

  test "add weight of current fish returns the weight of the fish if consumed" do
    assert GrizzlyProblem.added_weight_of_current_fish(%{consumed: true, current_fish: %{unit: :gram, weight: 100 }}) == 100
  end

  test "add weight of current fish returns the weight of the fish if not consumed" do
    assert GrizzlyProblem.added_weight_of_current_fish(%{consumed: false, current_fish: %{unit: :gram, weight: 100 }}) == 0
  end

  test "convert fish consumed map to list of weight consumed" do
    consumed_fish_list = [
      %{consumed: true, current_fish: %{unit: :gram, weight: 100 }},
      %{consumed: false, current_fish: %{unit: :gram, weight: 100 }}
    ]
    assert GrizzlyProblem.map_weight_of_current_fish(consumed_fish_list) == [100, 0]
  end

  test "process_fish on empty list returns empty list" do
    assert GrizzlyProblem.process_fishes([], :placeholder) == []
  end

  test "Grizzly doesn't eat first fish if below threshold" do
    fish_list = [
      %{unit: :gram, weight: 100 },
      %{unit: :gram, weight: 100 },
      %{unit: :gram, weight: 70 },
    ]
    assert GrizzlyProblem.process_fishes(fish_list, 1000)|> Enum.map(&(&1.consumed)) == [false, true, false]
  end

  test "Grizzly eats first fish if above threshold" do
    fish_list = [
      %{unit: :gram, weight: 100 },
      %{unit: :gram, weight: 100 },
      %{unit: :gram, weight: 70 },
    ]
    assert GrizzlyProblem.process_fishes(fish_list, 0)|> Enum.map(&(&1.consumed)) == [true, true, false]
  end

  test "Grizzly always eats second fish if first fish is skipped" do
    fish_list = [
      %{unit: :gram, weight: 100 },
      %{unit: :gram, weight: 1 },
      %{unit: :gram, weight: 70 },
    ]
    assert GrizzlyProblem.process_fishes(fish_list, 1000)|> Enum.map(&(&1.consumed)) == [false, true, true]
  end

  test "expedition returns the weight of fish" do
    fish_list = [
      %{unit: :gram, weight: 250 },
      %{unit: :gram, weight: 175 },
      %{unit: :gram, weight: 823 }
    ]
    assert GrizzlyProblem.expedition(length(fish_list), 200, fish_list) == 1073
  end

end
